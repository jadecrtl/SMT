           Mini-projet 2 : Synthèse d'invariant en SMT-LIB
                            fichier RENDU
                     (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 19 décembre 2022

Identité
--------
Nombre de binôme: **à remplir**
Nom, prénom 1: CORTIAL, Jade
Nom, prénom 2: AHMED YAHIA, Yacine


Questions sur votre code
------------------------

** Exercice 2 **

0. Avez-vous testé que `make invariants` s'exécute sans erreurs ou
   warnings, puis que `./invariants` produit une sortie au format
   SMT-LIB, et enfin que cette sortie est acceptée par Z3 ?

Après exécution du makefile en faisant `make invariants` notre compilation se fait sans warning 
et notre exécutable `.invariants` produit une sortie au format SMT-LIB qui est acceptée par Z3.

---

1. Le type `term` est un type récursif : quel type de fonction est-il
   naturel d'utiliser ? Quels sont vos cas de base et quelle quantité
   strictement décroissante au cours des appels successifs vous assure
   la terminaison ?
   

Il est naturel d'utiliser des fonctions recursives. Les cas de base sont `Var` et `Const`,
le nombre de `term` décroit à chaque itération recursive c'est ce qui nous assure la terminaison.
On passe de `Add` ou `Mult` à nos cas de base.

---

2. Pour l'implémentation de `str_condition`, quelles sont les
   fonctions auxiliaires que vous avez utilisées et/ou écrites ? (Par
   une fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length` ou
   `List.rev_append`, ou une fonction `aux_str_condition` que vous
   avez écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `str_condition`.
   
On a écrit une fonction auxiliaire `aux_str_cond` qui s'arrête quand
la liste en paramètre est vide et qui s'occupe de renvoyer un string avec
tous les `term` de la liste grace à `str_of_term`. (On aurait pu utiliser un
`List.fold` qui aurait fait str_of_term sur chaque `term` de la liste)

---

3. Pour l'implémentation de `str_assert_forall`, quelles sont les
   fonctions auxiliaires que vous avez utilisées et/ou écrites ?
   Expliquez en quelques phrases en français comment ces fonctions
   auxiliaires sont utilisées dans votre implémentation de la fonction
   `str_assert_forall`.
   
On a une fonction auxiliaire `aux_str_forall` qui prend un `int` en
paramètre et qui fonctionne comme une boucle. A chaque itération
si le n = 0 on arrête c'est le cas de base, sinon comme pour `str_condition`
on continue pour renvoyer toutes les variables de x1 à xn.
   
---

4. Le langage de programmation WA suppose que les mises à jour des
   variables `x1`, ..., `xk` sont simultanées : par exemple, si `x1`
   vaut `1` et x2 vaut `1`, exécuter

   x1 = x2 + 1;
   x2 = x1 + 1;

   résulte en `x1` valant `2` et `x2` valant `2`. En Java, les mises à
   jour sont séquentielles et le résultat serait que `x1` vaudrait `2`
   et `x2` vaudrait `3`. Expliquez en français comment modifier le
   code pour construite un programme SMT-LIB plus proche de la façon
   dont les variables sont mises à jour en Java.

Pour avoir un code qui fonctionne le plus proche de la façon dont les variables
sont mises à jour en java il faudrait d'abord séparer les instructions de mise à
jour de chaque variable en des instructions distinctes. Puis exécuter les instructions 
de mise à jour dans l'ordre dans lequel elles sont écrites. 
En suivant ces étapes nous devrions être en mesure avec un programme SMT-LIB de 
mettre à jour les variables de manière séquentielle comme en Java.


---
5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

**à remplir**


